/**
* This file is auto generated by Twin Dragons Tools
* LeaderboardPopupView.cpp
* DragonVideoPoker
*
* Created by apple on Mon Jul 28 10:51:18 GMT+07:00 2014
*
**/

#include <vector>


#include "LeaderboardPopupView.h"
#include "VisibleRect.h"
#include "GameParams.h"
#include "TableView.h"
#include "TdgServer.h"
#include "UserInfo.h"
#include "AvatarMenuItem.h"
#include "FBAvatarDownloader.h"
#include "ITableViewBuilder.h"
#include "Leaderboard.h"
#include "ITableCellView.h"

class LeaderboardCellView : public ITableCellView {
public:
    static LeaderboardCellView* create(const vector<CCSprite*> &pNumberSprites,
                                       const int &idx);
    virtual bool init(const vector<CCSprite*> &pNumberSprites,
                      const int &idx = 0);
    virtual  void update(const int &idx);
    CC_SYNTHESIZE(CCSprite*, mBgNumberSprite, BgNumberSprite);
    CC_SYNTHESIZE(CCSprite*, mNumberSprite, NumberSprite);
    CC_SYNTHESIZE(CCLabelTTF*, mUsernameLabel, UsernameLabel);
    CC_SYNTHESIZE(CCLabelTTF*, mUserchipLabel, UserchipLabel);
    CC_SYNTHESIZE(CCLabelTTF*, mOrderLabel, OrderLabel);
    CC_SYNTHESIZE(AvatarMenuItem*, mAvatarMenuItem, AvatarMenuItem);
protected:
    virtual void addSprites();
    virtual void addLabels();
    virtual void addMenuItems();
    
    virtual void updateSprites(const int &idx);
    virtual void updateLabels(const int &idx);
    virtual void updateMenuItems(const int &idx);
private:
    CCSprite* mBgSprite;
    CCSprite *mFrameAvatarSprite;
    vector<CCSprite*> mNumberSprites;
};

LeaderboardCellView* LeaderboardCellView::create(const vector<CCSprite*> &pNumberSprites,
                                                 const int &idx) {
    LeaderboardCellView* pRet = new LeaderboardCellView;
    pRet->init(pNumberSprites, idx);
    pRet->autorelease();
    
    return pRet;
}

bool LeaderboardCellView::init(const vector<CCSprite*> &pNumberSprites,
                               const int &idx) {
    mNumberSprite = NULL;
    mNumberSprites = pNumberSprites;
    return ITableCellView::init(idx);
}

void LeaderboardCellView::addSprites() {
    
    mBgSprite = CCSprite::create(D::id.leaderboard_popup_bg.c_str());
    mBgSprite->setPosition(GPARAMS().POP_LEADERBOARD_BG_SPRITE_POSITION);
    this->addChild(mBgSprite);
    mBgNumberSprite = CCSprite::create(D::id.leaderboard_popup_bg_number.c_str());
    mBgNumberSprite->setPosition(GPARAMS().POP_LEADERBOARD_BG_NUMBER_SPRITE_POSITION);
    mBgSprite->addChild(mBgNumberSprite, 0);
    if(mIndex < 3) {
        mBgSprite->addChild(mNumberSprites[mIndex]);
        
        //if index < 3, disable background of number label
        mBgNumberSprite->setVisible(false);
    }
    
    mFrameAvatarSprite = (GPARAMS().isIpadDevice)
        ?CCSprite::create(D::id.leaderboard_popup_frame_avatar_ipad.c_str())
        :CCSprite::create(D::id.leaderboard_popup_frame_avatar.c_str());
    mFrameAvatarSprite->setPosition(GPARAMS().POP_LEADERBOARD_FRAME_AVATAR_SPRITE_POSITION);
    mFrameAvatarSprite->retain();
    
}

void LeaderboardCellView::addLabels() {
    //add label
    const char* username = LEADERBOARD()->getUserInfos().at(mIndex)->getFullName();
    mUsernameLabel = CCLabelTTF::create(username,
                                                   DEFAULT_FONT_NAME,
                                                   GPARAMS().CMM_FONT_SIZE_2);
    mUsernameLabel->setAnchorPoint(CCPoint(0, 0.5f));
    mUsernameLabel->setPosition(GPARAMS().POP_LEADERBOARD_USERNAME_LABEL_POSITION);
    mBgSprite->addChild(mUsernameLabel, 100);
    
    string chipstr = LEADERBOARD()->getUserInfos().at(mIndex)->getChipsString();
    mUserchipLabel = CCLabelTTF::create(chipstr.c_str(),
                                                   DEFAULT_FONT_NAME,
                                                   GPARAMS().CMM_FONT_SIZE_2);
    mUserchipLabel->setAnchorPoint(CCPoint(0, 0.5f));
    mUserchipLabel->setPosition(GPARAMS().POP_LEADERBOARD_USERCHIP_LABEL_POSITION);
    mBgSprite->addChild(mUserchipLabel, 100);
    mUserchipLabel->setColor(ccc3(251, 199, 0));
    
    const char* order = CCString::createWithFormat("%d", (mIndex + 1))->getCString();
    mOrderLabel =
    CCLabelTTF::create(order,
                       DEFAULT_FONT_NAME,
                       GPARAMS().CMM_FONT_SIZE_3);
    mOrderLabel->setPosition(GPARAMS().POP_LEADERBOARD_NUMBER_1_SPRITE_POSITION);
    mOrderLabel->setTag(9999);
    mBgSprite->addChild(mOrderLabel, 100);
    
    if(mIndex < 3) {
        mOrderLabel->setVisible(false);
    }
}

void LeaderboardCellView::addMenuItems() {
    UserInfo* userInfo =LEADERBOARD()->getUserInfos().at(mIndex);
    mAvatarMenuItem =
    AvatarMenuItem::create(userInfo->getProfileID(),
                           userInfo->getUserAvatarType(),
                           mFrameAvatarSprite->getContentSize(),
                           mFrameAvatarSprite->getPosition());
    mBgSprite->addChild(mAvatarMenuItem);
    if(userInfo->getIsFBAccount() && userInfo->getUserAvatarType() == 0) {
        FBAvatarDownloader::create(userInfo->getProfileID(),
                                   kFBAvatarAutoDownload,
                                   mAvatarMenuItem,
                                   avatar_selector(AvatarMenuItem::internalAvatarLoadedCallback));
    }
}

void LeaderboardCellView::updateSprites(const int &idx) {
    if(idx < 3) {
        mNumberSprites[idx]->removeFromParentAndCleanup(true);
        mBgSprite->addChild(mNumberSprites[idx]);
        mNumberSprites[idx]->setVisible(true);
    } else if(mBgSprite->getChildByTag(9999) != NULL) {
        mBgSprite->getChildByTag(9999)->setVisible(false);
    }
    mBgNumberSprite->setVisible(idx >= 3);
    
}
void LeaderboardCellView::updateLabels(const int &idx) {
    UserInfo* userInfo =LEADERBOARD()->getUserInfos().at(idx);
    mUsernameLabel->setString(userInfo->getFullName());
    mUserchipLabel->setString(userInfo->getChipsString().c_str());
    
    const char* order = CCString::createWithFormat("%d", (idx + 1))->getCString();
    mOrderLabel->setString(order);
    mOrderLabel->setVisible(true);
    if(idx < 3) {
        mOrderLabel->setVisible(false);
    }
}
void LeaderboardCellView::updateMenuItems(const int &idx) {
    mAvatarMenuItem->updateAvatarWithUserInfo(LEADERBOARD()->getUserInfos().at(idx));
}

void LeaderboardCellView::update(const int &idx) {
    ITableCellView::update(idx);
}


LeaderboardPopupView::~LeaderboardPopupView()
{
    for(int i = 0 ; i < 3 ; i++) {
        if(mNumberSprites[i] != NULL) {
            mNumberSprites[i]->release();
        }
    }
}

void LeaderboardPopupView::onExit()
{
    PopUpLayer::onExit();
    
    CCNotificationCenter::sharedNotificationCenter()->removeAllObservers(this);
}

LeaderboardPopupView* LeaderboardPopupView::create(
							string pBackgroundImage,
							string pExitNormalImage,
							string pExitSelectedImage) {
    LeaderboardPopupView* pRet = new LeaderboardPopupView();
    pRet->autorelease();
    pRet->init(
    		pBackgroundImage, 
    		pExitNormalImage, 
    		pExitSelectedImage);
    
    return pRet;
}

bool LeaderboardPopupView::init(
							string pBackgroundImage,
							string pExitNormalImage,
                            string pExitSelectedImage) {             
	
    PopUpLayer::init(pBackgroundImage,
                     pExitNormalImage,
                     pExitSelectedImage,
                     GPARAMS().POP_COMMON_EXIT_BUTTON_POSITION);
    setBackgroundPosition(VisibleRect::center());
    
    mWaitingLayer = NULL;
    mIsUpdate = false;
    
    CCNotificationCenter::sharedNotificationCenter()->addObserver(this,
                                                                  callfuncO_selector(LeaderboardPopupView::
                                                                                     onGetDataFinished),
                                                                  NOTIFICATION_GET_LEADERBOARD_FINISHED,
                                                                  NULL);
    this->addWaitingLayerWithType(kWaitingLayerJustShow);
    
    scheduleUpdate();

    return true;
}

void LeaderboardPopupView::onActionShowFinished()
{
    PopUpLayer::onActionShowFinished();
    SERVER().sendUpdateLeaderboardRequest();
}

void LeaderboardPopupView::addMenuItems() {
    PopUpLayer::addMenuItems();
}

void LeaderboardPopupView::addSprites() {
	PopUpLayer::addSprites();
    
    mLeaderboardBannerSprite =
    CCSprite::create(D::id.leaderboard_popup_leaderboard_banner.c_str());
    mLeaderboardBannerSprite->setPosition(GPARAMS().POP_LEADERBOARD_LEADERBOARD_BANNER_SPRITE_POSITION);
    mBackgroundSprite->addChild(mLeaderboardBannerSprite, 0);
    
    string numberSpriteStrs[3] =  {
        D::id.leaderboard_popup_number_1,
        D::id.leaderboard_popup_number_2,
        D::id.leaderboard_popup_number_3
    };
    mNumberSprites = vector<CCSprite*>(3);
    for(int i = 0 ; i < 3 ; i++) {
        mNumberSprites[i] = CCSprite::create(numberSpriteStrs[i].c_str());
        mNumberSprites[i]->setPosition(GPARAMS().POP_LEADERBOARD_NUMBER_1_SPRITE_POSITION);
        mNumberSprites[i]->setTag(9999);
        mNumberSprites[i]->retain();
    }

}

void LeaderboardPopupView::addLabels() {
	PopUpLayer::addLabels();	
   
	// add position label
    string yourPosition = string("Your position: ")
        .append(LEADERBOARD()->getUserChipRank().c_str());
	mYourPositionLabel = CCLabelTTF::create("",
                                            DEFAULT_FONT_NAME,
                                            GPARAMS().CMM_FONT_SIZE_3);
	mYourPositionLabel->setAnchorPoint(CCPoint(0, 0.5f));
	mYourPositionLabel->setPosition(GPARAMS().POP_LEADERBOARD_YOUR_PLACE_LABEL_POSITION);
	mBackgroundSprite->addChild(mYourPositionLabel, 1);
}

void LeaderboardPopupView::addProgressBars() {
	PopUpLayer::addProgressBars();
	
	//{add_progressbars}
}

void LeaderboardPopupView::addTables() {
	PopUpLayer::addTables();
	
    
}

void LeaderboardPopupView::addActions() {
    PopUpLayer::addActions();
    
    //{add_actions}
}

void LeaderboardPopupView::addWaitingLayerWithType(int type)
{
    // remove last waiting layer
    removeWaitingLayer(-1);
    
    // create new one
    mWaitingLayer = WaitingLayer::createWithType(type);
    this->addChild(mWaitingLayer, WAITING_POP_UP_ORDER);
}

void LeaderboardPopupView::removeWaitingLayer(int type)
{
    if (mWaitingLayer != NULL) {
        if (type == -1 || type == mWaitingLayer->getWaitingType()) {
            mWaitingLayer->removeLayer();
            mWaitingLayer = NULL;
        }
    }
}

void LeaderboardPopupView::onGetDataFinished(CCObject* object)
{
    mIsUpdate = true;
}

void LeaderboardPopupView::updateView()
{
    vector<UserInfo*> userInfos = LEADERBOARD()->getUserInfos();
    string yourPosition = string("Your position: ")
    .append(LEADERBOARD()->getUserChipRank().c_str());
    mYourPositionLabel->setString(yourPosition.c_str());
    mTableView = TableView::create(
                                   GPARAMS().POP_LEADERBOARD_TABLE_SIZE,
                                   userInfos.size(),
                                   1,
                                   GPARAMS().POP_LEADERBOARD_TABLE_CELL_POSITION,
                                   GPARAMS().POP_LEADERBOARD_TABLE_CELL_SIZE,
                                   this);
    mTableView->setPosition(GPARAMS().POP_LEADERBOARD_TABLE_POSITION);
    mTableView->setTouchPriority(kCCMenuHandlerPriority - 101);
    
    mBackgroundSprite->addChild(mTableView);

    removeWaitingLayer(-1);
}

void LeaderboardPopupView::update(float dt) {
    if(mIsUpdate) {
        mIsUpdate = false;
        updateView();
    }
}

ITableCellView* LeaderboardPopupView::createTableViewCellAt(const int &idx) {
    ITableCellView *pRet = LeaderboardCellView::create(mNumberSprites, idx);
    
    return pRet;
}
